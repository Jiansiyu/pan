// -*- c++ -*-

#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <TH1.h>
#include <TObject.h>
#include <TROOT.h>
#include <TString.h>
#include <TTree.h>
#include "src/TaFileName.hh"
#include "RedCoefs.macro"

// Uncomment to load fake correction coefficients
//#define FAKETYFAKE 1

class ParamSave
{
  // Class to save parameters of distributions and print them
  
public:
  
  ParamSave (UInt_t run): fRun(run) {};
  ParamSave() {};
  virtual ~ParamSave() {};
  
  void LoadCorrs (); // load correction coefficients and correction monitor tags
  void PutMonDiff (const string mt, TTree& t, const string sel); // Monitor diffs from plot
  void PutMonAsym (const string mt, TTree& t, const string sel); // Monitor asyms from plot
  void PutMon (const string mt, const string dora, TTree& t, const string sel); // Monitor diffs/asyms from plot
  void PutMon (const string mt, const Double_t m, const Double_t me, const Double_t w); // Monitor diffs/asyms specified
  
  
  void PutMonDDDiff (const string mt1, const string mt2, TTree& t, const string sel); // Monitor ddiffs from plot
  void PutMonDDAsym (const string mt1, const string mt2, TTree& t, const string sel); // Monitor dasyms from plot
  void PutMonDD (const string mt1, const string mt2, const string dora, TTree& t, const string sel); // Monitor ddiffs/dasyms from plot
  void PutMonDD (const string mt1, const string mt2, const Double_t w);         // Monitor ddiffs
  
  void PutDetAsymn (const string dt, TTree& t, const string sel); // Detector norm asyms from plot
  void PutDetAsym (const string dt, TTree& t, const string sel); // Detector asyms from plot
  void PutDet (const string dt, const string naora, TTree& t, const string sel); // Detector norm asyms/asyms from plot
  void PutDet (const string dt, const Double_t m, const Double_t me, const Double_t w); // Detector asyms
  
  void Print();  // Print to file
  string AsyCorr (string det, Bool_t modulation);
  
private:
  
  UInt_t fRun;            // run number
  
  // Correction quantities
  vector<string> fCorrMonTag;         // Monitors used
  map<string,vector<Double_t> > fCorrCoef[2];  // Correction coefficients [regress, modulation]
  
  // Monitor quantities
  vector<string> fMonTag;
  vector<Double_t> fDifM;  // means
  vector<Double_t> fDifME; // errors on means
  vector<Double_t> fDifW;  // widths
  vector<string> fMonTag1;   // first tags for double differences
  vector<string> fMonTag2;   // first tags for double differences
  vector<Double_t> fDDifW;    // widths
  
  // Detector quantities
  vector<string> fDetTag;
  vector<Double_t> fAsyM;  // means
  vector<Double_t> fAsyME; // errors on means
  vector<Double_t> fAsyW;  // widths
};

void 
ParamSave::LoadCorrs ()
{
  // For now this is just hardwired

  fCorrMonTag.clear();
  fCorrMonTag.push_back ("bpm4ax");
  fCorrMonTag.push_back ("bpm4bx");
  fCorrMonTag.push_back ("bpm4ay");
  fCorrMonTag.push_back ("bpm4by");
  fCorrMonTag.push_back ("bpm12x");

  // Detectors for which to look for coefficients
  vector<string> corrDetTag;
  corrDetTag.clear();
  corrDetTag.push_back ("det1");
  corrDetTag.push_back ("det3");
  
  vector<Double_t> v;
#ifndef FAKETYFAKE
  gROOT->LoadMacro("RedCoefs.macro+");
  RedCoefs* rc;
  for (vector<string>::const_iterator idt = corrDetTag.begin();
       idt != corrDetTag.end();
       ++idt)
    {
      v.clear();
      // For now just regression
      for (vector<string>::const_iterator imt = fCorrMonTag.begin();
	   imt != fCorrMonTag.end();
	   ++imt)
	{
	  rc = new RedCoefs  (fRun, "regress", string("asym_n_")+(*idt), string("diff_") + (*imt));
	  if (rc->GetMeanErr() > 0)
	    v.push_back (rc->GetMean());
	  delete rc;
	}
      fCorrCoef[0][*idt] = v;
    }
#else
  cerr << "=====================================" << endl;
  cerr << "WARNING!" << endl;
  cerr << "FAKE CORRECTION COEFFICIENTS LOADED!" << endl;
  cerr << "=====================================" << endl;
  
  v.clear();
  v.push_back (0.1);
  v.push_back (0.2);
  v.push_back (0.3);
  v.push_back (0.4);
  v.push_back (0.5);
  fCorrCoef[0]["blumi1"] = v;
  
  v.clear();
  v.push_back (0.5);
  v.push_back (0.4);
  v.push_back (0.3);
  v.push_back (0.2);
  v.push_back (0.1);
  fCorrCoef[1]["blumi1"] = v;
#endif
}


void 
ParamSave::PutMonDiff (const string mt, TTree& t, const string sel)
{
  PutMon (mt, "diff", t, sel);
}


void 
ParamSave::PutMonAsym (const string mt, TTree& t, const string sel)
{
  PutMon (mt, "asym", t, sel);
}


void 
ParamSave::PutMon (const string mt, const string dora, TTree& t, const string sel)
{
  // Story diffs or asyms (dora = "diff" or "asym") for monitor named mt
  // from tree t with selection sel
  
  // NOTE: Provided we're not using an axis sub-range, ROOT's mean
  // and RMS for a histogram created by TTree::Draw come from the
  // *data*, not the histogram (but using only data within
  // histogram limits) -- so should be accurate (provided there
  // are no underflows/overflows).  For our "width" we want the
  // estimated variance, i.e. with sqrt (n-1) in the denominator,
  // rather than RMS with sqrt (n).
  
  Double_t m = 1e99;
  Double_t me = 1e99;
  Double_t w = 1e99;
  Double_t n;
  
  t.Draw ((dora + "_" + mt).c_str(), sel.c_str());
  TH1* htemp = (TH1*)gROOT->FindObject ("htemp");
  if (htemp)
    {
      n = htemp->GetEntries();
      if (n > 1)
	{
	  m = htemp->GetMean(); 
	  me = htemp->GetRMS() / sqrt (n-1);
	  w = me * sqrt (n);
	}
    }
  else
    cerr << "htemp not found" << endl;
  PutMon (mt, m, me, w); 
}


void 
ParamSave::PutMon (const string mt, const Double_t m, const Double_t me, const Double_t w)
{
  fMonTag.push_back (mt);
  fDifM.push_back (m);
  fDifME.push_back (me);
  fDifW.push_back (w);
}

void 
ParamSave::PutMonDDDiff (const string mt1, const string mt2, TTree& t, const string sel)
{
  PutMonDD (mt1, mt2, "diff", t, sel);
}


void 
ParamSave::PutMonDDAsym (const string mt1, const string mt2, TTree& t, const string sel)
{
  PutMonDD (mt1, mt2, "asym", t, sel);
}


void 
ParamSave::PutMonDD (const string mt1, const string mt2, const string dora, TTree& t, const string sel)
{
  // Store ddiffs or dasyms (dora = "diff" or "asym") for monitors
  // named mt1, mt2 from tree t with selection sel
  
  Double_t w = 1e99;
  Double_t n;
  
  t.Draw ((dora + "_" + mt1 + "-" + dora + "_" + mt2).c_str(), sel.c_str());
  TH1* htemp = (TH1*)gROOT->FindObject ("htemp");
  if (htemp)
    {
      n = htemp->GetEntries();
      if (n > 1)
	w = htemp->GetRMS() * sqrt (n / (n-1));
    }
  else
    cerr << "htemp not found" << endl;
  PutMonDD (mt1, mt2, w); 
}


void 
ParamSave::PutMonDD (const string mt1, const string mt2, const Double_t w)
{
  fMonTag1.push_back (mt1);
  fMonTag2.push_back (mt2);
  fDDifW.push_back (w);
}

void 
ParamSave::PutDetAsymn (const string dt, TTree& t, const string sel)
{
  PutDet (dt, "asym_n", t, sel);
}


void 
ParamSave::PutDetAsym (const string dt, TTree& t, const string sel)
{
  PutDet (dt, "asym", t, sel);
}


void 
ParamSave::PutDet (const string dt, const string naora, TTree& t, const string sel)
{
  // Store norm asyms or asyms (naora = "asym_n" or "asym") for
  // detector named dt from tree t with selection sel
  // If correction coefficients exist, do corrected asyms too.
  
  Double_t m = 1e99;
  Double_t me = 1e99;
  Double_t w = 1e99;
  Double_t n;
  string adetstring = (naora + "_" + dt);
  
  for (UInt_t i = 0; i < 3; ++i)
    {
      // Do raw, regression, modulation
      string drawstring = 
	i == 0 ? adetstring :
	i == 1 ? AsyCorr (dt, 0) :
	AsyCorr (dt, 1);
      if (drawstring != "")
	{
	  cerr << "Drawing " << drawstring << endl;
	  t.Draw (drawstring.c_str(), sel.c_str());
	  TH1* htemp = (TH1*)gROOT->FindObject ("htemp");
	  if (htemp)
	    {
	      n = htemp->GetEntries();
	      if (n > 1)
		{
		  m = htemp->GetMean(); 
		  me = htemp->GetRMS() / sqrt (n-1);
		  w = me * sqrt (n);
		}
	    }
	  else
	    cerr << "htemp not found" << endl;
	  string tag = dt + 
	    (i == 0 ? " raw" :
	     i == 1 ? " reg" :
	     " mod");
	  PutDet (tag, m, me, w); 
	}
    }
}  
  
void 
ParamSave::PutDet (const string dt, const Double_t m, const Double_t me, const Double_t w)
{
  fDetTag.push_back (dt);
  fAsyM.push_back (m);
  fAsyME.push_back (me);
  fAsyW.push_back (w);
}


void
ParamSave::Print()
{
  // Print distribution parameters
  
  TaFileName fn (fRun, "standard", "output", "macro", "txt");
  ofstream ofile(fn.String().c_str());
  if (!ofile)
    {
      cerr << "ParamSave::Print ERROR: Cannot open output file " << fn.String() << endl;
      exit (1);
    }
  else
    clog << "Output file is " << fn.String() << endl;
  
  ofile << "Distribution parameters for run " << fRun << endl;
  ofile << "======================================" << endl;
  
  ofile.setf(ios::left,ios::adjustfield);
  
  ofile << "\nMonitor differences / asymmetries:" << endl;
  UInt_t idif;
  for (idif = 0; idif < fMonTag.size(); ++idif)
    {
      ofile << setw(8) << fMonTag[idif]
	    << " Mean " 
	    << setw(8) << fDifM[idif]
	    << " +- " << setw(8) << fDifME[idif]
	    << "  Width " 
	    << setw(8) << fDifW[idif]
	    << endl;
    }
  
  ofile << "\nMonitor double differences:" << endl;
  for (UInt_t iddif = 0; iddif < fMonTag1.size(); ++iddif)
    {
      ofile << setw(8) << fMonTag1[iddif]
	    << " - " << setw(8) << fMonTag2[iddif]
	    << "  Width " 
	    << setw(8) << fDDifW[iddif]
	    << endl;
    }
  
  
  ofile << "\nDetector Asymmetries:" << endl;
  for (UInt_t iasy = 0; iasy < fDetTag.size(); ++iasy)
    {
      ofile << setw(8) << fDetTag[iasy]
	    << " Mean " 
	    << setw(8) << fAsyM[iasy]
	    << " +- " << setw(8) << fAsyME[iasy]
	    << "  Width " 
	    << "   " << setw(8) << fAsyW[iasy] << endl;
    }
  
  ofile.close();
}

string 
ParamSave::AsyCorr (string det, Bool_t modulation)
{
  TString ret("");
  UInt_t imr = modulation ? 1 : 0;

  vector<Double_t> corrcoef = fCorrCoef[imr][det];
  if (corrcoef.size())
    {
      ret = TString("asym_n_");
      ret += det.c_str();
      for (UInt_t i = 0; i < fCorrMonTag.size(); ++i)
	{
	  ret += "+";
	  ret += corrcoef[i];
	  ret += "*diff_";
	  ret += fCorrMonTag[i].c_str();
	}
    }
  return string(ret.Data());
}
