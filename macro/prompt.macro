// -*- c++ -*-

#include <string>

void prompt (UInt_t run, UInt_t batch, TString comment = "")
{
  // Prompt analysis tasks for ROOT.  Noninteractive tasks are done
  // first; if batch is zero, we call the online macro as well.

  Int_t ret;
  ret = open (run, "regress", comment);
  TTree* tt = (TTree*) (gROOT->FindObject("P"));

  if (ret && tt)
    {
      TCanvas* cparsave = new TCanvas();

      // Get parameters of asymmetry and difference distributions
      // and print them to a file.
      
      gROOT->LoadMacro("ParamSave.macro+");
      ParamSave* ps = new ParamSave (run);
      ps->LoadCorrs();
      
      ps->PutMonAsym("bcm1", *tt, "ok_cut");
      ps->PutMonAsym("bcm2", *tt, "ok_cut");
      ps->PutMonAsym("bcm3", *tt, "ok_cut");
      ps->PutMonAsym("bcm5", *tt, "ok_cut");
      ps->PutMonAsym("bcm6", *tt, "ok_cut");
      ps->PutMonAsym("bcm10", *tt, "ok_cutC");
      ps->PutMonAsym("bcmcav2", *tt, "ok_cut");
      ps->PutMonAsym("bcmcav3", *tt, "ok_cut");
      
      ps->PutMonDiff("bpm4ax", *tt, "ok_cut");
      ps->PutMonDiff("bpm4ay", *tt, "ok_cut");
      ps->PutMonDiff("bpm4bx", *tt, "ok_cut");
      ps->PutMonDiff("bpm4by", *tt, "ok_cut");
      ps->PutMonDiff("bpm12x", *tt, "ok_cut");
      ps->PutMonDiff("bpmcav2x", *tt, "ok_cut");
      ps->PutMonDiff("bpmcav2y", *tt, "ok_cut");
      ps->PutMonDiff("bpmcav3x", *tt, "ok_cut");
      ps->PutMonDiff("bpmcav3y", *tt, "ok_cut");
      
      ps->PutMonDDAsym("bcm1", "bcm2", *tt, "ok_cut");
      ps->PutMonDDAsym("bcm1", "bcm3", *tt, "ok_cut");
      ps->PutMonDDAsym("bcm2", "bcm3", *tt, "ok_cut");
      ps->PutMonDDDiff("bpm4ax", "bpm4bx", *tt, "ok_cut");
      ps->PutMonDDDiff("bpm4ay", "bpm4by", *tt, "ok_cut");
      ps->PutMonDDAsym("bcmcav2", "bcmcav3", *tt, "ok_cut");
      ps->PutMonDDDiff("bpmcav2x", "bpmcav3x", *tt, "ok_cut");
      ps->PutMonDDDiff("bpmcav2y", "bpmcav3y", *tt, "ok_cut");
      
      ps->PutDetAsymn("flumi1", *tt, "ok_cut");
      ps->PutDetAsymn("flumi2", *tt, "ok_cut");

      ps->PutDetAsymn("blumi1", *tt, "ok_cut");
      ps->PutDetAsymn("blumi2", *tt, "ok_cut");
      ps->PutDetAsymn("blumi3", *tt, "ok_cut");
      ps->PutDetAsymn("blumi4", *tt, "ok_cut");
      ps->PutDetAsymn("blumi5", *tt, "ok_cut");
      ps->PutDetAsymn("blumi6", *tt, "ok_cut");
      ps->PutDetAsymn("blumi7", *tt, "ok_cut");
      ps->PutDetAsymn("blumi8", *tt, "ok_cut");
      ps->PutDetAsymn("blumi_ave", *tt, "ok_cut");
      ps->PutDetAsymn("blumi_sum", *tt, "ok_cut");

      ps->PutDetAsymn("det1", *tt, "ok_cut");
      ps->PutDetAsymn("det2", *tt, "ok_cut");
      ps->PutDetAsymn("det3", *tt, "ok_cut");
      ps->PutDetAsymn("det4", *tt, "ok_cut");
      ps->PutDetAsymn("det_lo", *tt, "ok_cut");
      ps->PutDetAsymn("det_hi", *tt, "ok_cut");
      ps->PutDetAsymn("det_all", *tt, "ok_cut");
      ps->PutDetAsymn("det_ave", *tt, "ok_cut");
      
      ps->Print();
      delete cparsave;
    }
 
  if (!batch)
    {
      online ("prompt", run);
      ret = open (run, "dither", comment);
      if (ret)
	{
	  if ((TTree*)gROOT->FindObject("ditslps"))
	    {
	      gROOT->LoadMacro("spokes.macro");
	      TCanvas* c1 = new TCanvas("c1", "spokes", 800, 800);
	      c1->Divide (2, 2);
	      c1->cd(1);
	      spokes (0, "bpm4ax", "bpm4bx", 3000.);
	      c1->cd(2);
	      spokes (0, "bpm4ay", "bpm4by", 3000.);
	    }
	}
    }
}
