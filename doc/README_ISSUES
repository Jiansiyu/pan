Comments by R. Holmes, March 2002
---------------------------------

Compiler warnings at present include:

  TaFdbkAna.hh: In method `TaFdbkAna::TaFdbkAna()':
  TaFdbkAna.hh:79: warning: member initializers for `Int_t TaFdbkAna::fZsent'
  TaFdbkAna.hh:81: warning:   and `Double_t TaFdbkAna::fQmevFdbk'
  TaFdbkAna.cc:39: warning:   will be re-ordered to match declaration order

(Probably just need to swap ordering of a couple of initializers to
fix this.)

  TaCutList.cc: In method `void TaCutList::Init(const class VaDataBase &)':
  TaCutList.cc:66: warning: comparison between signed and unsigned
  TaCutList.cc:69: warning: conversion from `int' to `enum ECutType'

(First is because VaDataBase::GetNumBadEv() returns Int_t and I'm
comparing to size_t.  I'd prefer it if GetNumBadEv() returned UInt_t.

(Second is because the TaCutInterval constructor takes an ECutType
argument, which I must initialize from an Int_t returned from
VaDataBase::GetCutValues().  Probably just need a cast or something.

(While we're on the subject, I have to use loops to initialize
fLowExtension and fHighExtension in the same routine because they are
vector<UInt_t> and VaDataBase::GetEvLo() and GetEvHi() return
vector<Int_t>.  If they returned vector<UInt_t> I could do a vector
assignment.)

  TaEvent.cc: In method `void TaEvent::Decode()':
  TaEvent.cc:158: warning: comparison between signed and unsigned

(fSizeConst is UInt_t and it is being compared to (long)GetEvLength().
Why?  GetEvLength() is a UInt_t too; why cast it to long?)

Other issue: the pair_ok element of the pair tree is filled from
VaPair::PassedCuts().  I fixed this to return 1 only if *both* events
have zero CutStatus(), but this just means neither event failed a cut
condition.  If we want to tag pairs in which neither event lies in a
cut interval, that requires a different test (and more complicated,
since it needs access to the cut list; we'd need to change the calling
routine interface for a couple of levels).



Comments by A. Vacheret, March, 2002
----------------------------------

Resolved other 'discard const' warnings

In VaAnalysis::RunInI() I set the value of fEHelDequeMax at 1 in case of no helicity delay.
That's why we didn't have the pair tree after a run.

TaEvent private variable FirstPS was set to 1 to respect the source convention. 

See other change in ChangeLog
  
The code uses 32 Mbytes memory at present, I think this is because we have the pair analysis loop
working now. No evident memory leak during a run but Pan is a kind of slow compared to apar. 

Feedback are working but not the cuts yet. With cuts and pedestal calibration, it should 
work like apar.

Statisitics shows error during calculation, didn't take the time to look at this carefully

Will put the type of analysis in the root file name. Also the time parameter for the feedback should be
in the database to be able to change the lenght of a feedback minirun.




commit -m "added analysis choice BEAM or FDBK" TaAnalysisManager.cc
commit -m "added analysis choice BEAM or FDBK" TaAnalysisManager.hh
commit -m "added TaFdbkAna " Makefile
commit -m "added member functions" TaRun.cc
commit -m "added member functions" TaRun.hh
commit -m "added some test for asym debug and other" VaAnalysis.cc
commit -m "added some test for asym debug and other" VaAnalysis.hh
commit -m "fixed discard const and bug" TaEvent.cc 
commit -m "fixed discard const and bug" TaEvent.hh
commit -m "fixed discard const" TaADC.cc 
commit -m "fixed conventions" TaPairFromPair.cc
commit -m "fixed discard const" VaDevice.cc
commit -m "fixed conventions and add function for cut test" VaPair.cc
commit -m "fixed conventions and add function for cut test" VaPair.hh
commit -m "new feedback class" TaFdbkAna.hh
commit -m "new feedback class" TaFdbkAna.cc
commit -m "add <math.h>" TaStatistics.hh 



Comments by R. Michaels, Feb, 2002
----------------------------------

Several of the problems mentioned below were addressed,
see ChangeLog.

Still some compiler warnings, and you may get in trouble
if you don't 'make clean' before 'make'.

Do we need to distinguish between 'run type' and 'analysis
type' in the database ?  For now I let this distinction exist
and have awkwardly e.g. runtype = anatype = BEAM

Present status:  I think the event data and database makes
sense now, but not all is well with the helicity code. (It
could be a symptom of problem with the decoding but I doubt 
it.)  There are helicity errors, and no sensible statistic
results.  The ROOT output, however, looks somewhat reasonable.

The code uses 16.6 Mbytes memory at present, and this remains
stable.  One should check it by running 'top' during execution.
There was a memory leak in VaAnalysis::PreProcessEvt() when
the helicity delay was zero.  See my temporary dirty fix.



Comments by R. Holmes, Dec 21, 2001
------------------------------------

VaDataBase.hh had "void DataMapReStart()" which was never defined.
TaAsciiDatabase had the same and defined it.  That was OK with the
compiler, I guess, but not with rootcint.  I have changed it to
"virtual void DataMapReStart()=0" in VaDataBase.hh.

============================================================

I changed the name of TaEvent::Check to CheckEvent, because rootcint
uses a header file, TError.h, that defines Check as a macro.  Which is
really stupid programming on their part, of course.

============================================================

User friendliness needs to improve.  For instance:

  Analysis fails if TIR is not defined in datamap, yet no check is
  made for this.  Analyzer should exit on first event with a message
  to the effect "TIR must be defined in datamap.".

  Note that at least some of the problems currently seen seem to be
  related to problems with the database file; for example, it
  complains about "csr" being used for multiple devices.  I modified
  the error message to make it a little more informative.  Since users
  can in principle screw up the database text files, we MUST make all
  database related error messages as informative as possible to users.

  THaCodaFile::staterr() still aborts the process if the CODA file is
  not found, which is very unfriendly behavior when running
  interactively. 

============================================================

Warnings:
TaADC.cc: In method `void TaADC::Init(const class VaDataBase &)':
TaADC.cc:45: warning: assignment to `int' from `Double_t'

VaDevice.cc: In method `Double_t VaDevice::GetData(const class string &) const':
VaDevice.cc:70: warning: passing `const map<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> >,double,less<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> > >,__default_alloc_template<true,0> >' as `this' argument of `Double_t & map<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> >,double,less<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> > >,__default_alloc_template<true,0> >::operator []<string, Double_t, less<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> > >, alloc>(const class string &)' discards const

VaDevice.cc: In method `Double_t VaDevice::GetData(const Int_t &) const':
VaDevice.cc:83: warning: passing `const map<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> >,double,less<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> > >,__default_alloc_template<true,0> >' as `this' argument of `Double_t & map<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> >,double,less<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> > >,__default_alloc_template<true,0> >::operator []<string, Double_t, less<basic_string<char,string_char_traits<char>,__default_alloc_template<true,0> > >, alloc>(const class string &)' discards const

VaDevice.cc: In method `void VaDevice::FindHeaders(const class TaEvent &)':
VaDevice.cc:142: warning: comparison between signed and unsigned
VaDevice.cc:149: warning: comparison between signed and unsigned

============================================================








