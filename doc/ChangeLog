  ChangeLog
  =========

This is a detailed list of ongoing changes.  Add changes to 
the top of this file.

Changes by R. Holmes on 04 Jun 2002
-----------------------------------

A few generic types of change, distributed among many classes:

(1) Methods that return error codes now return ErrCode_t instead of
    Int_t.  ErrCode_t is typedefed to Int_t.

(2) Some methods in VaAnalysis now return error codes, which are
    passed up to the main program.

(3) TaRun::GetDataBase(), which had been returning a pointer, now
    returns a ref.

(4) Database checkout code removed from VaAnalysis to become a new
    VaDataBase method.

(5) Database classes now assign value to runnum.

(6) Some obsolete classes removed.


PanTypes.hh 

 o Typedef for ErrCode_t

TaADCCalib.{cc,hh}

 o ProcessRun returns ErrCode_t

TaAnalysisManager.cc

 o Int_t --> ErrCode_t for error returns
 o Pass up results from RunIni and ProcessRun
 o TaRun::GetDataBase() usage change

TaAnalysisManager.hh

 o Int_t --> ErrCode_t for error returns

TaAsciiDB.cc, TaMysql.cc

 o Initialize runnum in Load

TaEvent.cc

 o TaRun::GetDataBase() usage change

TaFdbkAna.{cc,hh}, TaRunFeedback.{cc,hh}

 o Removed (obsolete) 

TaRun.{cc,hh}

 o Int_t --> ErrCode_t for error returns
 o GetDataBase returns ref, not pointer

VaAnalysis.{cc,hh}

 o Various error returns instead of exiting
 o Database checkout code moved to VaDataBase
 o TaRun::GetDataBase() usage change

VaDataBase.{cc,hh}

 o Add Checkout method (based on code removed from VaAnalysis)



Changes by R. Holmes on 31 May 2002
-----------------------------------

TaAsciiDB.{cc,hh} TaCutList.cc TaMysql.{cc,hh} VaAnalysis.cc
VaDataBase.hh 

 o Name changes: evlo, evhi --> extlo, exthi in database keys, and
   similar changes to access function names.  (This is because cut
   extensions are expressed in the database as a number of windows,
   not a number of events.)

main.cc

 o Log info about software version.  


Changes by R. Holmes on 24 May 2002
-----------------------------------

Today's changes are in two general categories:

First, as a way to address two outstanding issues (error messages
printed about zeroes in the denominator of asymmetry when beam is off,
and kludgey approach to deciding which statistics to print based on
stats name) I added a new data member to TaLabelledQuantity to store
flags.  These flags can be used to govern how the labelled quantities
are used.  (Their meanings are purely externally defined -- the
TaLabelledQuantity class merely stores the flags and provides a method
to test them.  It's up to other classes to define their meaning.)
Correspondingly, flags were added to the AnaList utility class in
VaAnalysis.  Two flags were used to tag quantities for which
statistics should not be printed (copies of the helicity and
pairsynch) and for which asymmetries should not be calculated if
either event of the pair fails the low beam cut condition.  (This
should produce no change in the results, if cuts are imposed; it just
stops those annoying error messages.  Doing this for just the flagged
quantities, rather than for all quantities, allows us to compute
asymmetries for e.g. batteries even when beam is off, which is a
perfectly reasonable thing to want to do.)  Three more flags enabled
me to replace the three analysis lists -- copy, diff, and asy -- with
a single list.

Second, I did some cleanup of error / log / output messages.  Some
things that should go to the cerr or clog streams were being sent to
cout.  On the other hand, I decided the statistics which were being
sent to clog should go to cout.  Finally, I silenced the complaint
about lack of feedback info in the database, figuring this shouldn't
be an error -- it should be interpreted the same as if the database
entry were present but with "off" indicated.

TaAsciiDB.cc
 o Various cout --> cerr
 o commented out error message in GetFdbkSwitch

TaBeamAna.cc
 o Copy, diff, and asy lists --> tree list with flags

TaEvent.{cc,hh}
 o Add BeamCut() method

TaLabelledQuantity.{cc,hh}
 o Add flags storage and a method to test flags 

TaRun.cc 
 o Stats iff NO_STATS flag not set
 o Some clog --> cout

VaAnalysis.{cc,hh} 
 o Copy, diff, and asy lists --> tree list with flags
 o Get asymmetries iff beam cut passed when NO_BEAM_NO_ASY flag set
 o Some cout --> clog 


Changes by R. Holmes on 22 May 2002
-----------------------------------

TaCutList.{cc,hh} TaEvent.{cc,hh} TaLabelledQuantity.hh
TaPairFromPair.hh TaString.{hh,cc} VaPair.{cc,hh} 

 o Comments for THtml

TaRun.{cc,hh}

 o Comments for THtml

 o Remove unused or no-op functions AddCutToEvent(), AddCuts()

 o Remove unused static data members fgPHYSICSMAX and fgPRESTART

TaStatistics.{cc,hh}

 o Comments for THtml

 o Remove useless operator<<()

VaAnalysis.{cc,hh}

 o Comments for THtml

 o Remove call to no-op (now deleted) AddCuts()" 


Changes by R. Holmes on 21 May 2002
-----------------------------------

TaAsciiDB.hh TaBeamAna.{cc,hh} TaCutInterval.{cc,hh} TaCutList.{cc,hh},
TaEvent.{cc,hh} TaLabelledQuantity.{cc,hh} TaPairFromPair.{cc,hh} 

 o Comments for THtml.

TaLinkDef.hh 

 o Remove TaFdbkAna, TaRunFeedback.

VaAnalysis.cc

 o Call to VaPair::RunInit; no tree print.


Changes by R. Holmes on 20 May 2002
-----------------------------------

Makefile 
 o Remove TaMapFile.cc from list of sources.

TaADCCalib.{hh,cc}
 o Add/change comments for THtml.

TaEvent.{cc,hh} 
 o Better handling of initialization.  There is a new RunInit routine
   to be called at beginning of run.  Cut thresholds are stored in
   static data members instead of being read from database every time.

 o Errors and log messages to cerr and clog instead of cout.

TaPairFromPair.{cc,hh}
 o Add RunInit() to initialize static data members at start of run.

 o Remove HSDEB code.

TaRun.cc
 o Call to TaEvent::RunInit().

VaPair.{cc,hh}
 o Change Init() into RunInit().


Changes by R. Holmes on 17 May 2002
-----------------------------------

I observed that the removal of the exit from THaCodaFile didn't
prevent Pan from crashing in flames when faced with a nonexistent
input file.  The problem was that there was no way for Pan to check
that the THaCodaFile constructor actually succeeded, so it would
merrily proceed to try to read the nonexistent file and crash there.

To fix this I added a data member to THaCodaData to store the status
of the Coda calls, and an access function.  Now we can check status
after the THaCodaFile constructor and if it's bad, bail.

Making use of this, however, required changing some method types from
void to Int_t in TaRun and TaAnalysisManager, so the error could be
propagated up the calling chain.  (TaRun also has some changes
intended to improve its self-documentation in the class index.)

Finally, main.cc was changed to look for these errors and return 1
when found -- likewise macro/run.macro.


Changes by R. Holmes on 13 May 2002
-----------------------------------

TaCutList.{cc,hh}

 o Standardize method names -- printTally etc. become PrintTally.

 o PrintTally works a little differently.  Now prints cut name and
   number, and number of events failing that cut condition.

TaLinkDef.hh 

 o Remove TaADC.

TaRun.cc

 o Print cut tallies every 1000 events, and at end of run.

TaString.hh

 o Include RTypes, needed to compile dictionary code.

macro/run.macro; README 

 o run.macro is a sample macro to run the analysis after querying the
   user for a run number.  After analysis ends it opens the
   corresponding root file and does a sample plot, leaving the file
   open for the user to enter other Root commands.


Changes by R. Holmes on 16 Apr 2002
-----------------------------------

TaFdbkAna.cc

  o Move SendEPICSInfo here from TaRun.

TaRun.{cc,hh}

  o Move SendEPICSInfo to TaFdbkAna.cc.
  
  o Init all pointers to zero, and delete all pointers (except
    fEvtree). 

main.cc

  o Fix bug in string length computation.

Changes by R. Holmes on 11 Apr 2002
-----------------------------------

Another bunch of changes, to replace scattered string functions with a
new TaString class and to add some non-default copy constructors and
operator=.  

TaString inherits from string.  It does not overload anything nor add
any new data members; it just defines some new string functions.
There is a TaString(const string) constructor.  So you can convert
back and forth between strings and TaStrings with impunity, using
TaStrings only where you need the new functions (of course the
conversion has some cost, but you shouldn't be using strings in
time-critical parts of the code anyway.)  For example, this line from
TaAsciiDB: 

   return TaString (GetData(table, device, 0)).Hex();

The functions bstrstr, stlow, vsplit, and str_to_base16 in VaDataBase,
cmp_nocase in TaAnalysisManager, and cmp_nocase2 in TaADCCalib are now
replaced with TaString methods.  Note that TaString::CmpNoCase, like
the usual C and C++ 3-way compares as well as cmp_nocase and
cmp_nocase2 but not like bstrstr, returns 0 for equal strings.

MakeFile

 o Add TaString.

TaAnalysisManager.{cc}

 o Replace cmp_nocase with TaString method.

TaADCCalib.cc

 o Replace cmp_nocase2 with TaString method.

TaAsciiDB.cc

 o Replace use of bstrstr, stlow, vsplit, and str_to_base16 with
   TaString methods.

TaCutInterval.{hh,cc}, TaCutList.{cc,hh}

 o Add copy constructors and operator=.

TaEvent.hh

 o Remove some unused data members.

TaLinkDef.hh

 o Add TaString class.

TaString.{cc,hh}

 o New.

VaDataBase.{cc,hh}

 o Remove bstrstr, stlow, vsplit, and str_to_base16.


Changes by R. Michaels on 10 Apr 2002
-------------------------------------

Some minor mod's after Rich's mod's below
cvs commit -m "OPTIMIZE off by default so compile is fast" Makefile
cvs commit -m "GetKey check if string found, added timeboard & pairsynch" TaDevice.cc

	
Changes by R. Holmes on 10 Apr 2002
-----------------------------------

I've made a bunch of changes, mostly in three categories: (1) fixing
compiler warnings (2) improving stats output format and (3) changing
the way cut intervals are updated.

The latter is a little arcane.  The point is that multiple copies of
events get stored -- there's the copy owned by TaRun, the copy in the
event queue, and the copy in a pair in the pair queue, for instance.
(And before going into those queues, they go through the helicity
delay queue.)  The copy in TaRun is the one that gets checked for
event errors, and is later copied into the event and pair queues;
however, it's a copy of this which is put into a pair and checked for
helicity/synch sequence errors.  That means a couple of things.  One,
the event found in the event queue never has pair cuts stored in its
list of failed cuts.  Since event queue events are presumably used
only for the non-pair tree and non-pair analyses, that's not
necessarily a problem.

What is a problem is that the event owned by TaRun also has pair cut
failures indicated.  We were using that copy of the event to update
cut intervals; this means sequence errors were never generating cut
intervals.  Bad thing.

The new scheme is to call a new method in TaRun to update the cut
intervals immediately upon finding each cut condition.  The ugly side
of this is that a couple of pair methods now have run arguments where
they didn't need them before.

Here's a more detailed list of changes:

TaCutList.{cc,hh}

 o Added tally of events that fail cut conditions.

 o Added a vector string to hold cut names, with an access function to
   add a name.  Used by printTally().
	
	
 o Added printInt(), printExt(), and printTally() methods, and
   redefined operator<< as a call to all three.

 o Other minor tweaks.

TaDevice.{cc,hh}

 o Added const to both GetKey()s.  For GetKey(Int_t) this then
   required changing the iterator to const_iterator; for
   GetKey(string) I had to replace fKeyToIdx[keystr] by
   (fKeyToIdx.find(keystr))->second .  (You can't index into a const
   map, but you can do a find on it.  I believe this should not change
   the behavior for defined keys, and for undefined keys
   GetKey(string) probably should complain, not just silently return
   zero.

 o Removed const from argument of Init(), since it calls
   DataMapReStart() and NextDataMap() which modify the database object.

 BOB -- PLEASE VERIFY THESE CHANGES ARE OK!

TaEvent.{cc,hh}

 o Added calls to TaRun::UpdateCutList().

 o Other tweaks.

TaFdbkAna.cc

 o Re-ordered constructor initializers to quell a warning.

TaPairFromPair.{cc,hh}

 o Added call to TaRun::UpdateCutList().
 
 o Added run argument to CheckSequence() and Fill().

TaRun.{cc,hh}

 o Added calls to TaCutList::AddName().

 o Stats output format enhancements.

 o Added UpdateCutList() method.

 o Commented out body of AddCuts() method.  (To be removed entirely if
   the new scheme works OK.)

VaAnalysis.cc

 o Added run argument to VaPair::Fill() call.

 o Other tweaks.

VaPair.{cc,hh}

 o Added run argument to Fill().

 o Other tweaks.



Changes by R. Michaels on 6 Apr 2002
-------------------------------------

Studied g++ optimization (flag OPTIMIZE in Makefile).  Gains of 10%
in speed are possible, but the compilation is slower.  Suggest to 
comment out OPTIMIZE if you are frequently compiling code.

Made "Get" methods of TaDevice inline, but it seems these methods get 
inlined anyway with optimization.  

			
Changes by R. Michaels on 5 Apr 2002
-------------------------------------

Before changing anything, I created a "stable release"
    cvs -q tag Stable-version0-5Apr2002
To retrieve this in the future, you may
    cvs checkout -r Stable-version0-5Apr2002
But, you probably never will want to.  Instead, you should
checkout the new code in a CLEAN new working directory.

Massive surgery:  elimination of the classes

   VaDevice  TaADC   TaBCM   TaBPM   TaTIR  TaScaler  TaTB

There is a new class TaDevice which is owned by TaRun.
It contains the data that TaEvent needs to decode devices,
but which doesn't change throughout a run.  

To increase the speed, we use static arrays of data, with 
access by integer indices, not strings.  This is found to be
much faster than hash maps.

In TaEvent the "Get" methods for data are:

   // raw data, index = location in buffer 
       Int_t GetRawData(Int_t index); 
   // get data by unique key
       Double_t GetData(Int_t key);   
   // get raw ADC data in slot and chan (slot & chan starts at 0)
       Double_t GetRawADCData(Int_t slot, Int_t chan);  
   // get calib. ADC data in slot and chan.
       Double_t GetCalADCData(Int_t slot, Int_t chan);  
   // get scaler data in slot and chan.
       GetScalerData(Int_t slot, Int_t chan);  

The "GetData(key)" method uses integer keys defined in
DevTypes.hh.   Examples:

      GetData(IBCM1R);     // gets raw (R) data from BCM1
      GetData(IHELICITY);  // gets the helicity data.

The string names equivalent to these integer keys is
defined in an obvious way in TaDevice::InitKeyList, and
users can determine the correspondence at initialization
using the method of TaRun

      Int_t GetKey(string keystr);  // returns integer key

The string names are still used to define variables in 
the root output trees, in TaLabelledQuantity, etc.  
The VaAnalysis was modified to use a vector of "AnaList"
objects which contain the string names, corresponding
integer keys, and units.

Other details:
  - TaAnalysisManager sets ROOT file compression level to 0
  - Suppress printout of datamap (commented out)

  - Files affected:
     Makefile
     TaADCCalib.cc
     TaAsciiDB.cc
     TaAnalysisManager.cc
     TaBeamAna.cc
     TaEvent.cc
     TaEvent.hh
     TaRun.cc
     TaRun.hh
     VaAnalysis.cc
     VaAnalysis.hh
     VaPair.cc
     VaPair.hh
     TaFdbkAna.cc

  - New files:
     TaDevice.cc
     TaDevice.hh
     DevTypes.hh
	
	
Changes by R. Holmes on 18-19 Mar 2002
----------------------------------------

TaAsciiDB.cc

  o Better error messages for selfcheck of windelay and oversamp;
    oversamp can be up to 12 (is this safe?)

TaEvent.{cc,hh}

  o Add DumpBits for helicity etc. diagnostics

TaPairFromPair.{cc,hh}

  o In Fill(), now check for mismatch between number of 'first' and
    'second' events.  I.e.:

      o If we see a 'first' event immediately after a 'second' event,
        but the event queue is not empty, then we didn't have enough
        'seconds' to pair with all the 'firsts'.

      o If we see a 'second' event while the event queue is empty,
        then we didn't have enough 'firsts' to pair with all the
        'seconds'. 

    In either case we print an error message and return false.  In the
    first case we also clear the event queue and set fgSkipping to
    true if the timeslot isn't 1, to skip events until the start of
    the next 'first' window.  In the second case we always set
    fgSkipping to true.  We do NOT generate a cut but I believe we
    don't need to -- there should always be a sequence cut just before
    or after this.

  o In CheckSequence(), do checks between this window and previous
    window even if timeslot = 1 is not seen.


Changes by R. Holmes on 15 Mar 2002
----------------------------------------

TaRun.cc

  o Various improvements to stats printouts.  Stats are printed when
    pair containing event n*1000 is analyzed, not when that event is
    read.  Printout headers suppressed if there are no stats.  Slice
    stats are printed at end of run, before cumulative stats.

Changes by R. Holmes on 13 Mar 2002
----------------------------------------

TaCutInterval.cc

  o Bug fix: Intervals starting at an event number less than the
    before-extension size were handled incorrectly due to unsigned
    arithmetic. 

TaCutList.cc

  o Multiply extensions from db (now regarded as number of windows) by
    oversample factor to get number of events.
  o Add debug code.

TaRun.cc

  o Better labelling of stats outputs to clarify incremental and
    cumulative stats.
  o Now compute and print stats on all quantities except those
    starting with "Right" or "Left".  This is still something of a
    kludge, but it's a better kludge.

VaAnalysis.hh,cc

  o Replace pair_ok in tree with ok_cond and ok_cut.

VaPair.hh,cc

  o Add PassedCutsInt().


More changes by R. Holmes on 7 Mar 2002
----------------------------------------

TaCutList.cc

  o Return stream from operator<<.
  o Check cut numbers when initializing from database and ignore any
    out of range.

TaCutInterval.cc

  o Return stream from operator<<.


Changes by R. Holmes on 7 Mar 2002
----------------------------------------

TaCutInterval.hh,cc

  o Add operator<< .

TaCutList.hh,cc

  o Initialize cut list and cut extensions from database. (This
    requires a change to the Init interface.) 
  o Add operator<< .

TaEvent.hh,cc

  o Replace data member fCut with fCutFail and fCutPass. 
  o Clear these when loading an event (I'm not sure this is
    necessary). 
  o Call badly-named AddCut for every event cut on every event, with
    value zero when cut is passed, nonzero otherwise.
  o Add GetCutsPassed() as counterpart to GetCuts() (which returns
    cuts failed). 

TaPairFromPair.cc

  o Call badly-named AddCut for every pair cut on every pair, with
  value zero when cut is passed, nonzero otherwise.

TaRun.cc

  o Minor changes required due to above changes in TaCutList and
    TaEvent.
  o A couple of new debug prints (enabled with NOISY).

VaAnalysis.hh,cc

  o Fixed members of pair tree (event numbers and pair_ok) are stored
    in their own variables, not in *fTreeSpace.
  o Initialize fEHelDequeMax to 1 greater than delay * oversample (and 
    eliminate special treatment for delay = 0.)
  o Eliminate "dirty fix" for memory leak (now plugged).

VaPair.cc

  o Change sign convention for differences and asymmetries back to 
    R-L.  (I did this because it is the convention used in HAPPEX I
    and so far as I know all other parity experiments, and because I
    do not know the reason why it was changed to L-R.  If there is a
    problem with R-L please let me know.  There may be a better fix.)
  o Change PassedCuts to return Bool_t, and require both events to be
    good.


Changes by R. Holmes on 5 Mar 2002
----------------------------------------

TaBeamAna 

  o Fix bug in InitChanLists causing BCM asymmetries to be stored
    twice. 

TaRun

  o Changes to prevent Pan from trying to compute and print means and
    widths of things like the helicity and pairsynch bits.  I decided
    on a quick and easy but not necessarily best fix, which is to
    accumulate sums for all "results" (including values of helicity
    and pairsynch) but compute and print means and widths only for
    those whose names start with "Asym" or "Diff".  I would be happy
    to hear suggestions for a better fix, if you have any.

TaStatistics 

  o Remove the error messages from the Neff routines which were
    printed when the statistics vectors are empty; instead it quietly
    returns zero, which is a sensible thing to return.  I think it
    should be legal to call Neff on a possibly empty statistics
    vector.  You still get error messages if you try to e.g. compute a
    mean on an empty vector.




* changes leading to March 1 2002 version
_________________________________________       

TaAnalysisManager -
   Can choose now between two type of analysis, so now the run type and the anatype could
   be different. We still need to put the ana type in the root file name.
         
        
VaAnalysis -
   Added RunInI() set the value of fEHelDequeMax at 1 in case of no 
   helicity delay. This was the main problem why we didn't have 
   the pair tree after a run.   

TaEvent -
   private variable FirstPS was set to 1 to respect the source 
   convention.

TaRun -
   Added event number (ev_num) explicitly in the tree so we don't have to use scaler1_1 to get it.
   Added SendEPICSInfo( pair< string, Double_t> value, pair<string,Double_t> errvalue) to be able 
   to send feedbacks infos to the source.       


VaAnalysis -
         
   Changed the convention for the asymmetry sign  : L - R  


TaFdbkAna -
         
    Derived from VaAnalysis, this is a 'TaBeamAna'  with charge asymmetry feedback implemented.
    will add PZT info if needed.        
        
        
        
        

* Primary changes leading to Feb 8, 2002 version
------------------------------------------------
 
TaAnalysisManager -
   Root file is now pan_%d.dat where %d = run number
   Upon initialization, the database is checked; if it is 'bad' we exit.

TaAsciiDB -
   Added GetMaxEvents()
   Added SelfCheck() - used by analysis manager.
   
TaBCM -
   Modified naming; restriction enforced that bcm1, bcm2 must be 
   different objects (not sure its a good idea but at least its clarified).

TaBeamAna -
   Uses 'bcm1r' and 'bcm1' for raw and corrected data.
   Got rid of the ifdef's since datamap iterator reset works now
      in VaAnalysis::ChanList and TIR is defined.
    
TaEvent -
   Check if event size is changing (it should not).
   Check that keys are unique within a device (see DATABASE.RULES)
   Clearer error messages if a key is not found or rule above broken.
   Provide GetADCData(slot, chan) method.
   Remove ifdef about TIR since it exists now (existence is checked).
   Add DeviceDump() to check all device data.

TaRun -
   If CHECKOUT defined, makes detailed debug printout.

TaTIR -
   Simplified.
   Add timeslot. 
   Call VaDevice::DataCopy so data shows up in Tree.

VaAnalysis -
   if CHECKOUT defined, makes detailed debug printout.
   GetMaxEvents() works now.
   datamap iterator reset before using NextDataMap, this part works now.
   Fixed a memory leak in PreProcessEvt().
 
VaDevice -
   Interface modified to accomodate above changes.
   FindHeaders() does not need a TaEvent.

