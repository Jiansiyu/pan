
               THE  PAN  DATABASE
               ==================

PART I:  THE BASICS
===================

  The "pan" database is a collection of control parameters, 
calibration parameters, cuts, etc which are read from an ASCII
file usually, but can also be read from a ROOT file or MYSQL.

  The database is stored in ASCII files in the ./db directory of 
the pan distribution.  The files have names like "parity02_1454.db" 
for run 1454, where "parity02" indicates the year 2002.  These
ASCII files will be produced automatically by CODA for each run
and distributed to users.  They can also be produced by a Perl 
script which reads MYSQL and generates the ASCII files. 

  The format of the database is such that the first word in each 
line is a "table" string, indicating a table in the MYSQL sense.  
The columns of data that follow in that line are associated data 
(data are strings, integers, or doubles) which belong to that table.  
Look into one of the files and it will be fairly obvious.  The rules 
are given formally below.

  Normally you would want to let "pan" read the ASCII database (db)
file corresponding to your run.  If that db file is missing, you are
warned, and the default file "control.db" from $pwd is used instead.
One can also force "pan" to use control.db (see examples).  Other 
options exist, for over-riding this database at the command line, 
for retrieving the database from a ROOT output or from MYSQL.

  Putting stuff in database:  You can use the Put() methods to put
ADC and Scaler calibration data, and cut intervals.  The database 
for that run is over-written (but only if you put something).  
See the temporary example section in VaAnalysis.

PART II:  LEARN BY EXAMPLE
==========================

Here are examples of how to use the database when running "pan":

  1.  The database is read from ./db/parity02_1454.db  if 
      it exists, otherwise from ./control.db

          ./pan -r 1454 

  2.  Force pan to read database read from ./control.db 

          ./pan -r 1454 -D control.db

  3.  Database read from ./control.db, and over-ride the
      tables 'lobeam' and 'windelay'. 
      All these are syntactically equivalent and correct:

       ./pan -r 1454 -D control.db -D lobeam 400 -D windelay 8
       ./pan -r 1454 -D control.db lobeam 400 windelay 8 
       ./pan -D control.db lobeam 400 windelay 8 -r 1454
       ./pan -D control.db -r 1454 -D lobeam 400 windelay 8

      but these examples are WRONG:
                             ^^^^^
       ./pan control.db -D -r 1454 lobeam 400 windelay 8
       ./pan control.db -r 1454 lobeam 400 windelay 8 -D

  4.  Read the database from root file parity02_1389_BEAM.root.
      Note: Any other '-D' command is ignored.  You *CANNOT*
      over-ride the database if you read from ROOT because
      this is intended to recover exact conditions.

        ./pan -r 1454 -D -useroot parity02_1389_BEAM.root
        ./pan -r 1454 -D -useroot bob.root -D lobeam 1200
          (in 2nd example, -D lobeam 1200 is ignored)

  5.  Read the database from MYSQL.

        ./pan -r 1454 -D -mysql

  6.  Read the database from MYSQL and over-ride a table 'lobeam'

        ./pan -r 1454 -D mysql -D lobeam 1400



PART III. RETREIVING DATA FROM MYSQL
====================================

    (This part to be written....  Hello, Riad ?)  


PART IV.  DATABASE SPECIFICATION
=================================

Here are some detailed specs in case you have too much imagination
and something goes wrong.  Most users can ignore this section.

The logic of command line over-ride of database does not allow 
infinite combinations.  Here is the expected behavior:

 *  If  '-D control.db' we read from control.db.  Other 
    '-D' command subsequently over-ride table(s).

 *  If  '-D useroot filename' we read database from ROOT
    file 'filename' and IGNORE all other commands.  This is
    because the purpose of reading from a ROOT file is to
    reproduce exactly the analysis conditions that were used
    to generate that ROOT file.

 *  If  '-D mysql' we read database from MYSQL. Other '-D'
    commands subsequently over-ride table(s).

 *  It is an error to specify both mysql and useroot. If
    you try that, you'll get no data at all (ERROR).

 *  '-D table values'  will over-write the table with those
    values, provided the line has proper syntax.  The syntax is
    the same as a line in the database.  IMPORTANT:  The table 
    is dropped; therefore, you cannot add to a table, instead 
    you must add all lines of a table when you start one.
    Normally this would be used for trivial tables like 
    '-D maxevents 500' or '-D lobeam 1200'.  If the syntax is
    wrong the error might not be caught, depending on what you
    do wrong.  Luckily the database is printed at the end-of-run
    summary, so hopefully you will realize it then.

Whenever you Put() data, it together with the other data will be written 
to ASCII and to MYSQL. To turn off MYSQL interaction requires an #ifdef
directive to be set.  However, what is written to the ROOT file and log 
output is always the data at startup, i.e. what was used for analysis.
The only data that can be Put() are DAC noise, pedestals, and cut 
intervals.  An important restriction is that you must Put ALL the 
data because I clear all the other data from that table as soon as 
you start Putting into that table.  So, you must Put() all ADC channels 
if you Put() one, and similarly you must Put() all cut intervals, if you
Put() one. Distinct tables (pedestals & cuts) don't interfere in this logic.

The Print() method should be called before any Put().  The Write() method
should be called after all Put()'s.

Required Content of Database
=============================
The following are required to be defined, else "pan" will complain.

   1. tirdata in datamap table
   2. a runtype
   3. a pairtype
   4. helicity delay 0 <= windelay <= 8.
   5. a reasonable oversamp value (could be 1)
   6. cuts named Low_beam, Beam_burp, and Oversample; for
      pair-structured beam data, cut named Sequence


Rules about the Datamap
=======================
The datamap is one of the tables in the database

1. Contents

   ALL raw data and ONLY raw data must be listed in the datamap.  
   ^^^              ^^^^
   Each line in the datamap has the form
table  dev-type dev-name read-type devnum startchan evbuff-offset chan-names(keys
   Example:
datamap   bpm   bpm8     adc   5    0       73  bpm8xp bpm8xm bpm8yp bpm8ym

   The 'datamap' is the name of the table in the database.  The other
   quantities are defined below.

2. Device type   

   The device type is used by the code to decide the generic type of 
   data being considered on this line.  It is not a class.

3. Device name    

   A device is a name that people call the a device type within the 
   code.  It is used to index the device.  It is not an object.

4. Readout type

   This indicates whether the readout is adc or scaler.  If we wanted to
   change the example above to a scaler, for example, we'd simply need to
   change "adc" to "scaler" and also adjust the evbuff-offset and possibly
   devnum and startchan as appropriate.

5. Device number

   The index of the ADC or scaler must be unique and denotes a physical ADC 
   or scaler unit.  

6. startchan

   The 'startchan' is the first channel that is mapped for that line
   in the datamap table of the database.  If there is only one datamap
   line for a given device-name, the startchan will usually be zero (1st
   channel).  However, if there are multiple lines for a given device-name,
   then the startchan is the first channel pertaining to the first key
   in the list.  It is assumed that the subsequent channels range from
   the start channel, incrementing by one for each key listed.  The same
   assumptions pertain to the evbuff-offset.   If raw data from an ADC is 
   not part of a channel (e.g. csr or dac) its channel number MUST BE NEGATIVE 
   by convention.                                             ^^^^^^^^^^^^^^^^

   An example follows, where some antennas for bpm4a are distributed across 
   two different ADCs.

      datamap   bpm   bpm4a  adc  7    0    85  bpm4axp bpm4axm 
      datamap   bpm   bpm4a  adc  9    2    99  bpm4ayp bpm4aym 

   And here is an example of data from one ADC.  Note the negative channel
   numbers for csr and dac.

      datamap   bpm   bpm10  adc  6    0    79  bpm10xp bpm10xm bpm10yp bpm10ym
      datamap   adc   adc3   adc  6   -9    83    csr dac

7. evbuff-offset

   The event buffer offset is the absolute position of the index for
   the data pertaining to the first key.  It is incremented like
   startchan and the two values (startchan and evbuff-offset) have a
   one-to-one correspondence.

8. keys  -- 

   In the datamap, keys are unique labels of channels of raw data.
   They are indexed in the code by indices in DevTypes.hh.  See also
   TaEvent::Decode() method.
 


