
  RULES OF DATAMAP AND DATABASE
  =============================

  REQUIRED CONTENT
  ================
The following are required to be defined, else the analysis will not continue.
(We may add to this list later).

   1. tirdata in datamap table
   2. a runtype
   3. a pairtype
   4. helicity delay of zero or 8.
   5. a reasonable oversamp value (could be 1)
   

  DATAMAP
  =======

1. Contents

   ALL raw data and ONLY raw data must be listed in the datamap.  
   ^^^              ^^^^
   Each line in the datamap has the form
table  dev-type dev-name read-type devnum startchan evbuff-offset chan-names(keys
   Example:
datamap   bpm   bpm8     adc   5    0       73  bpm8xp bpm8xm bpm8yp bpm8ym

   The 'datamap' is the name of the table in the database.  The other
   quantities are defined below.

2. Device type   

   Formerly this would be thought of as a class, but this concept is
   obsolete.  However, the dev-type is still used by the code decide the
   generic type of data being considered on this line.  

3. Device name    

   Formerly known as an object, this concept is obselete after the
   decoding was simplified.  A device name is simply what people call
   the whole device within the code.  It is used to index the device.

4. Readout type

   This indicates whether the readout is adc or scaler.  If we wanted to
   change the example above to a scaler, for example, we'd simply need to
   change "adc" to "scaler" and also adjust the evbuff-offset and possibly
   devnum and startchan as appropriate.

5. Device number

   The index of the ADC or scaler must be unique and denotes a physical ADC 
   or scaler unit.  

6. startchan

   The 'startchan' is the first channel that is mapped for that line
   in the datamap table of the database.  If there is only one datamap
   line for a given device-name, the startchan will usually be zero (1st
   channel).  However, if there are multiple lines for a given device-name,
   then the startchan is the first channel pertaining to the first key
   in the list.  It is assumed that the subsequent channels range from
   the start channel, incrementing by one for each key listed.  The same
   assumptions pertain to the evbuff-offset.   If raw data from an ADC is 
   not part of a channel (e.g. csr or dac) its channel number MUST BE NEGATIVE 
   by convention.                                             ^^^^^^^^^^^^^^^^

   An example follows, where some antennas for bpm4a are distributed across 
   two different ADCs.

      datamap   bpm   bpm4a  adc  7    0    85  bpm4axp bpm4axm 
      datamap   bpm   bpm4a  adc  9    2    99  bpm4ayp bpm4aym 

   And here is an example of data from one ADC.  Note the negative channel
   numbers for csr and dac.

      datamap   bpm   bpm10  adc  6    0    79  bpm10xp bpm10xm bpm10yp bpm10ym
      datamap   adc   adc3   adc  6   -9    83    csr dac

7. evbuff-offset

   The event buffer offset is the absolute position of the index for the
   data pertaining to the first key.  It is incremented like startchan and
   the two values (startchan and evbuff-offset) have a one-to-one correspondence.

8. keys  -- 

   In the datamap, keys are unique labels of channels of raw data.
   They are indexed in the code by indices in DevTypes.hh.  See also
   TaEvent::Decode() method.
 
Information from the database or the run are checked.
If they are absent or corrupted, an error message is printed
(These rules are what I intend, but may not be enforced in early versions).

I.  Fatal errors which halt the code include: 
---------------------------------------------

  1) No TIR, or multiple TIR, defined in datamap.

  2) No definition of oversamp, windelay, or pairtype.

  3) If a device type in the database are not among those defined by TaRun
     
  4) Keys is not unique within a given device.


II. Non-fatal errors which print a warning.
-------------------------------------------

  1) No definition for the various cuts.
          
  2) Unknown run number.

  3) CODA file not found.
           
  4) Warning if any devices don't have the expected number of channels.
     (Typically 4 channels for BPMs,  32 for scalers, and 1 for BCM,
      the latter is awkward if 1 BCM signal is fanned out to two ADC
      channels, you must instantiate 2 copies.) 

  5) If any channel of a particular ADC are defined, then four channels
     must be uniquely defined, and the csr and dac must be define, and all 
     of pedestal and dacnoise parameters must be uniquely defined.
     The channels within an object that derives from TaADC must be in
     the same slot.

  6) User attempts to access data by undefined key.  


